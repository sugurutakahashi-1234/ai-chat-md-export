
classDiagram
direction TB

class ConversationFilter{
            -logger: ILogger
            +filterConversations() FilterResult
-filterByDate() Conversation[]
-filterBySearch() Conversation[]
        }
IConversationFilter<|..ConversationFilter
class JsonFormatter{
            +format: Format.Json
            +formatSingle() string
+formatMultiple() string
+getDefaultFilename() string
-convertConversationToJson() JsonConversation
        }
class JsonOutput {
            <<interface>>
            +conversations: JsonConversation[]
            
        }
class JsonConversation {
            <<interface>>
            +id: string
+title: string
+date: string
+messages: JsonMessage[]
            
        }
class JsonMessage {
            <<interface>>
            +role: MessageRole
+content: string
+timestamp?: string
            
        }
IOutputFormatter<|..JsonFormatter
JsonOutput  -- "0..*" JsonConversation
JsonConversation  -- "0..*" JsonMessage
class MarkdownFormatter{
            +format: Format.Markdown
            +formatSingle() string
+formatMultiple() string
+getDefaultFilename() string
-formatDateTimeWithTimezone() string
-escapeHtmlInMarkdown() string
-escapeHtmlPreservingMarkdown() string
        }
IOutputFormatter<|..MarkdownFormatter
class FileLoader{
            -logger: ILogger
            +readJsonFile() Promise~unknown~
        }
IFileLoader<|..FileLoader
class FileWriter{
            -formatter: IOutputFormatter
-spinner?: ISpinner
            +writeConversations() Promise~WriteResult~
-writeSplitFiles() Promise~WriteResult~
-writeCombinedFile() Promise~WriteResult~
        }
IFileWriter<|..FileWriter
class Logger{
            -consola: ConsolaInstance
            +fatal() void
+error() void
+warn() void
+log() void
+info() void
+success() void
+fail() void
+box() void
+start() void
+ready() void
+debug() void
+trace() void
+verbose() void
        }
ILogger<|..Logger
class BasePlatformParser~T~{
            +schema: ZodType~T, unknown, $ZodTypeInternals~T, unknown~~*
#logger: ILogger
-schemaValidator: ISchemaValidator
-spinner: ISpinner
            +parseConversations() ParsedConversation~unknown~[]*
+parseAndValidateConversations() Promise~ParseResult~
        }
IPlatformParser~T~<|..BasePlatformParser~T~
class Spinner{
            -ora: Ora | null
-logger: ILogger
-options?: LoggingOptions
            +start() void
+update() void
+succeed() void
+fail() void
+stop() void
        }
ISpinner<|..Spinner
class ResultReporter{
            -logger: ILogger
-spinner: ISpinner
            -reportErrors() void
+reportWriteResult() void
+reportParseResult() void
+reportFilterResult() void
+reportFinalSummary() void
        }
IResultReporter<|..ResultReporter
class SchemaValidator{
            
            +validateWithDetails() ValidationResult~T~
+formatValidationReport() string
-detectUnknownFields() string[]
        }
ISchemaValidator<|..SchemaValidator
class ChatGPTParser{
            +schema: ZodArray~ZodObject~#123; title: ZodOptional~ZodNullable~ZodString~~; create_time: ZodNullable~ZodNumber~; update_time: ZodOptional~ZodNumber~; ... 6 more ...; id: ZodOptional~...~; #125;, $loose~~
-roleMap: #123; readonly user: MessageRole.User; readonly assistant: MessageRole.Assistant; readonly system: MessageRole.System; readonly tool: MessageRole.Tool; #125;
            +parseConversations() ParsedConversation~unknown~[]
-extractMessages() Message[]
-traverseNode() void
-mapRole() MessageRole
        }
BasePlatformParser~T~<|--ChatGPTParser
class ClaudeParser{
            +schema: ZodArray~ZodObject~#123; uuid: ZodString; name: ZodOptional~ZodNullable~ZodString~~; summary: ZodNullable~ZodOptional~ZodString~~; ... 5 more ...; current_leaf_message_uuid: ZodOptional~...~; #125;, $loose~~
            +parseConversations() ParsedConversation~unknown~[]
-transformMessages() Message[]
        }
BasePlatformParser~T~<|--ClaudeParser