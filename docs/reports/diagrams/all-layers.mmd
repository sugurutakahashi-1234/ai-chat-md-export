
classDiagram
direction TB

class ProcessorDependencies {
            <<interface>>
            +fileLoader: IFileLoader
+fileWriter: IFileWriter
+parser: IPlatformParser~unknown~
+formatter: IOutputFormatter
+filter: IConversationFilter
+logger: ILogger
+schemaValidator: ISchemaValidator
+spinner: ISpinner
            
        }
ProcessorDependencies  --  IFileLoader
ProcessorDependencies  --  IFileWriter
ProcessorDependencies  --  IOutputFormatter
ProcessorDependencies  --  IConversationFilter
ProcessorDependencies  --  ILogger
ProcessorDependencies  --  ISchemaValidator
ProcessorDependencies  --  ISpinner
class Processor{
            -deps: ProcessorDependencies
            +executeConversionPipeline() Promise~void~
        }
Processor  --  ProcessorDependencies
class Platform {
        <<enumeration>>
        ChatGPT
Claude
      }
class Format {
        <<enumeration>>
        Markdown
Json
      }
class FilenameEncoding {
        <<enumeration>>
        Standard
Preserve
      }
class Conversation {
            <<interface>>
            +id: string
+title: string
+date: Date
+messages: Message[]
            
        }
class Message {
            <<interface>>
            +role: MessageRole
+content: string
+timestamp?: Date
            
        }
class MessageRole {
        <<enumeration>>
        User
Assistant
System
Tool
      }
Conversation  -- "0..*" Message
Message  --  MessageRole
class BaseError{
            +context: Record~string, unknown~ | undefined
            
        }
class ValidationError{
            +validationErrors?: unknown
            
        }
class FileError{
            +filePath: string
+operation: FileOperation
            
        }
class FileOperation {
        <<enumeration>>
        Read
Write
      }
BaseError<|--ValidationError
BaseError<|--FileError
FileError  --  FileOperation
class ConversationFilter{
            -logger: ILogger
            +filterConversations() Conversation[]
-filterByDate() Conversation[]
-filterBySearch() Conversation[]
        }
IConversationFilter<|..ConversationFilter
ConversationFilter  --  ILogger
class JsonFormatter{
            +format: Format.Json
            +formatSingle() string
+formatMultiple() string
+getDefaultFilename() string
-convertConversationToJson() JsonConversation
        }
class JsonOutput {
            <<interface>>
            +conversations: JsonConversation[]
            
        }
class JsonConversation {
            <<interface>>
            +id: string
+title: string
+date: string
+messages: JsonMessage[]
            
        }
class JsonMessage {
            <<interface>>
            +role: MessageRole
+content: string
+timestamp?: string
            
        }
IOutputFormatter<|..JsonFormatter
JsonOutput  -- "0..*" JsonConversation
JsonConversation  -- "0..*" JsonMessage
JsonMessage  --  MessageRole
class MarkdownFormatter{
            +format: Format.Markdown
            +formatSingle() string
+formatMultiple() string
+getDefaultFilename() string
-formatDateTimeWithTimezone() string
-escapeHtmlInMarkdown() string
-escapeHtmlPreservingMarkdown() string
        }
IOutputFormatter<|..MarkdownFormatter
class FileLoader{
            -logger: ILogger
            +readJsonFile() Promise~unknown~
        }
IFileLoader<|..FileLoader
FileLoader  --  ILogger
class FileWriter{
            -logger: ILogger
-formatter: IOutputFormatter
-spinner?: ISpinner
            +writeConversations() Promise~WriteResult~
-writeSplitFiles() Promise~WriteResult~
-writeCombinedFile() Promise~WriteResult~
-reportErrors() void
        }
IFileWriter<|..FileWriter
FileWriter  --  ILogger
FileWriter  --  IOutputFormatter
FileWriter  --  ISpinner
class Logger{
            -consola: ConsolaInstance
            +fatal() void
+error() void
+warn() void
+log() void
+info() void
+success() void
+fail() void
+box() void
+start() void
+ready() void
+debug() void
+trace() void
+verbose() void
        }
ILogger<|..Logger
class BasePlatformParser~T~{
            +schema: ZodType~T, unknown, $ZodTypeInternals~T, unknown~~*
#logger: ILogger
-schemaValidator: ISchemaValidator
-spinner: ISpinner
            +parseConversations() ParsedConversation~unknown~[]*
+parseAndValidateConversations() Promise~Conversation[]~
        }
IPlatformParser~T~<|..BasePlatformParser~T~
BasePlatformParser~T~  --  ILogger
BasePlatformParser~T~  --  ISchemaValidator
BasePlatformParser~T~  --  ISpinner
class Spinner{
            -ora: Ora | null
-logger: ILogger
-options?: LoggingOptions
            +start() void
+update() void
+succeed() void
+fail() void
+stop() void
        }
ISpinner<|..Spinner
Spinner  --  ILogger
class SchemaValidator{
            
            +validateWithDetails() ValidationResult~T~
+formatValidationReport() string
-detectUnknownFields() string[]
        }
ISchemaValidator<|..SchemaValidator
class IConversationFilter {
            <<interface>>
            
            +filterConversations() Conversation[]
        }
class IFileLoader {
            <<interface>>
            
            +readJsonFile() Promise~unknown~
        }
class WriteResult {
            <<interface>>
            +successCount: number
+errors: #123; file: string; error: string; #125;[]
            
        }
class IFileWriter {
            <<interface>>
            
            +writeConversations() Promise~WriteResult~
        }
class ILogger {
            <<interface>>
            
            +fatal() void
+error() void
+warn() void
+log() void
+info() void
+success() void
+fail() void
+box() void
+start() void
+ready() void
+debug() void
+trace() void
+verbose() void
        }
class IOutputFormatter {
            <<interface>>
            +format: Format
            +formatSingle() string
+formatMultiple() string
+getDefaultFilename() string
        }
IOutputFormatter  --  Format
class IPlatformParser~T~ {
            <<interface>>
            +schema: ZodType~T, unknown, $ZodTypeInternals~T, unknown~~
            +parseAndValidateConversations() Promise~Conversation[]~
+parseConversations() ParsedConversation~unknown~[]
        }
class ParsedConversation~T~ {
            <<interface>>
            +data: T
+schema: ZodType~T, unknown, $ZodTypeInternals~T, unknown~~
+transform: (validatedData: T) =~ Conversation
            
        }
class ISchemaValidator {
            <<interface>>
            
            +validateWithDetails() ValidationResult~T~
+formatValidationReport() string
        }
class ValidationResult~T~ {
            <<interface>>
            +success: boolean
+data?: T
+errors?: ValidationErrorDetail[]
+warnings?: ValidationWarning[]
            
        }
class ValidationErrorDetail {
            <<interface>>
            +path: string
+message: string
+expected?: string
+received?: string
            
        }
class ValidationWarning {
            <<interface>>
            +message: string
+unknownFields?: string[]
            
        }
ValidationResult~T~  -- "0..*" ValidationErrorDetail
ValidationResult~T~  -- "0..*" ValidationWarning
class ISpinner {
            <<interface>>
            
            +start() void
+update() void
+succeed() void
+fail() void
+stop() void
        }
class ChatGPTParser{
            +schema: ZodArray~ZodObject~#123; title: ZodOptional~ZodNullable~ZodString~~; create_time: ZodNullable~ZodNumber~; update_time: ZodOptional~ZodNumber~; ... 6 more ...; id: ZodOptional~...~; #125;, $loose~~
-roleMap: #123; readonly user: MessageRole.User; readonly assistant: MessageRole.Assistant; readonly system: MessageRole.System; readonly tool: MessageRole.Tool; #125;
            +parseConversations() ParsedConversation~unknown~[]
-extractMessages() Message[]
-traverseNode() void
-mapRole() MessageRole
        }
BasePlatformParser~T~<|--ChatGPTParser
class ClaudeParser{
            +schema: ZodArray~ZodObject~#123; uuid: ZodString; name: ZodOptional~ZodNullable~ZodString~~; summary: ZodNullable~ZodOptional~ZodString~~; ... 5 more ...; current_leaf_message_uuid: ZodOptional~...~; #125;, $loose~~
            +parseConversations() ParsedConversation~unknown~[]
-transformMessages() Message[]
        }
BasePlatformParser~T~<|--ClaudeParser